<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.yuliu.dao.LearnDao">
    <resultMap id="BaseResultMap" type="tech.yuliu.bean.Learn">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="word_id" jdbcType="INTEGER" property="wordId"/>
        <result column="count" jdbcType="INTEGER" property="count"/>
        <result column="time" jdbcType="INTEGER" property="time"/>
        <result column="memory" jdbcType="INTEGER" property="memory"/>
        <result column="attenuation" jdbcType="DOUBLE" property="attenuation"/>
    </resultMap>

    <insert id="insertLearn">
        insert into `learn`(`user_id`, `word_id`, `count`, `time`, `memory`, `attenuation`)
        values (#{userId}, #{wordId}, #{count}, #{time}, #{memory}, #{attenuation})
    </insert>

    <insert id="insertManyLearn">
        insert into `learn`(`user_id`, `word_id`, `count`, `time`, `memory`, `attenuation`)
        values
        <foreach collection="learns" separator="," item="learn">
            (#{learn.userId}, #{learn.wordId}, #{learn.count}, #{learn.time}, #{learn.memory}, #{learn.attenuation})
        </foreach>
    </insert>

    <select id="selectLearnedByUserId" resultMap="BaseResultMap">
        select `id`, `user_id`, `word_id`, `count`, `time`, `memory`, `attenuation`
        from `learn`
        where `user_id` = #{userId}
    </select>

    <select id="selectLastLearnByUserIdAndWordId" resultMap="BaseResultMap">
        select `id`, `user_id`, `word_id`, `count`, `time`, `memory`, `attenuation`
        from `learn`
        where `user_id` = #{userId}
          and `word_id` = #{wordId}
        order by `id` desc
        limit 1
    </select>

    <select id="selectLastLearnedListByUserIdAndWordIdList" resultMap="BaseResultMap">
        SELECT
        l2.`id`,
        l2.`user_id`,
        l2.`word_id`,
        l2.`count`,
        l2.`time`,
        l2.`memory`,
        l2.`attenuation`
        FROM
        `learn` l2
        JOIN (
        SELECT
        `word_id`,
        max( `count` ) `count`
        FROM
        `learn`
        WHERE
        `user_id` = #{userId}
        AND `word_id` IN
        <foreach collection="wordIdList" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY
        `word_id`
        ) l1 ON l1.`word_id` = l2.`word_id`
        WHERE
        l1.`count` = l2.`count`
    </select>

    <select id="selectExistsLearnRecordByUserId" resultType="java.lang.Boolean">
        select EXISTS(select `id` from learn where `user_id` = #{userId}) `exists`
    </select>

</mapper>